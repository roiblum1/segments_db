name: Release

on:
  release:
    types: [published]

jobs:
  release-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          docker.io/${{ secrets.DOCKER_USERNAME }}/vlan-manager
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        labels: |
          org.opencontainers.image.title=VLAN Manager
          org.opencontainers.image.description=Network VLAN allocation and management system
          org.opencontainers.image.vendor=${{ github.repository_owner }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.event.release.tag_name }}
          BUILD_DATE=${{ github.event.release.published_at }}
          COMMIT_SHA=${{ github.sha }}

    - name: Create deployment package
      run: |
        mkdir -p release-package
        
        # Copy important files
        cp README.md release-package/
        cp docker-compose.yml release-package/ 2>/dev/null || echo "version: '3.8'
services:
  vlan-manager:
    image: ${{ secrets.DOCKER_USERNAME }}/vlan-manager:${{ github.event.release.tag_name }}
    ports:
      - '8000:8000'
    environment:
      - MONGODB_URL=\${MONGODB_URL}
      - DATABASE_NAME=\${DATABASE_NAME:-vlan_manager}
      - SITES=\${SITES:-site1,site2,site3}
      - SITE_PREFIXES=\${SITE_PREFIXES:-site1:192,site2:193,site3:194}
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s" > release-package/docker-compose.yml
        
        # Create deployment instructions
        cat > release-package/DEPLOYMENT.md << 'EOF'
# VLAN Manager Deployment Guide

## Quick Start with Docker

### 1. Using Docker Run
```bash
docker run -d \
  --name vlan-manager \
  -p 8000:8000 \
  -e MONGODB_URL="your-mongodb-connection-string" \
  ${{ secrets.DOCKER_USERNAME }}/vlan-manager:${{ github.event.release.tag_name }}
```

### 2. Using Docker Compose
```bash
# Set environment variables
export MONGODB_URL="your-mongodb-connection-string"
export DATABASE_NAME="vlan_manager"
export SITES="site1,site2,site3"
export SITE_PREFIXES="site1:192,site2:193,site3:194"

# Start the service
docker-compose up -d
```

## Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| `MONGODB_URL` | MongoDB connection string | Required |
| `DATABASE_NAME` | Database name | `vlan_manager` |
| `SITES` | Comma-separated list of sites | `site1,site2,site3` |
| `SITE_PREFIXES` | Site IP prefix mapping | `site1:192,site2:193,site3:194` |

## Health Check

```bash
curl http://localhost:8000/api/health
```

## Documentation

- Web Interface: http://localhost:8000
- API Documentation: http://localhost:8000/static/html/help.html
- Health Check: http://localhost:8000/api/health

## Version Information

- **Release:** ${{ github.event.release.tag_name }}
- **Build Date:** ${{ github.event.release.published_at }}
- **Commit:** ${{ github.sha }}
EOF
        
        # Create archive
        tar -czf vlan-manager-${{ github.event.release.tag_name }}.tar.gz -C release-package .

    - name: Upload release assets
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./vlan-manager-${{ github.event.release.tag_name }}.tar.gz
        asset_name: vlan-manager-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Update release description
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ github.event.release.id }}
          });
          
          const dockerTags = `${{ steps.meta.outputs.tags }}`.split('\n');
          const dockerInfo = dockerTags.map(tag => `- \`${tag}\``).join('\n');
          
          const updatedBody = `${release.body}

## 🐳 Docker Images

${dockerInfo}

## 🚀 Quick Start

\`\`\`bash
# Pull and run
docker pull ${{ secrets.DOCKER_USERNAME }}/vlan-manager:${{ github.event.release.tag_name }}
docker run -d -p 8000:8000 --name vlan-manager ${{ secrets.DOCKER_USERNAME }}/vlan-manager:${{ github.event.release.tag_name }}
\`\`\`

## 📋 What's Included

- Multi-architecture Docker images (linux/amd64, linux/arm64)
- Deployment package with Docker Compose configuration
- Comprehensive documentation and deployment guide

## 🔗 Links

- [Documentation](http://localhost:8000/static/html/help.html) (after deployment)
- [Health Check](http://localhost:8000/api/health)
- [Web Interface](http://localhost:8000)
`;

          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ github.event.release.id }},
            body: updatedBody
          });