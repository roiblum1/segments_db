name: Build and Push Docker Image

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: vlan-manager

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate version and tags
      id: meta
      run: |
        # Get the current date for build metadata
        BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        
        # Get the short SHA
        SHORT_SHA=${GITHUB_SHA::8}
        
        # Generate version based on event type
        if [[ "${{ github.event_name }}" == "release" ]]; then
          # Use release tag for releases
          VERSION=${{ github.event.release.tag_name }}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          # For main branch, use semantic versioning with auto-increment
          # Get the latest tag that matches semantic versioning pattern
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n1)
          
          if [[ -z "$LATEST_TAG" ]]; then
            # No previous tags, start with v1.0.0
            VERSION="v1.0.0"
          else
            # Extract version numbers
            LATEST_TAG_CLEAN=${LATEST_TAG#v}  # Remove 'v' prefix
            IFS='.' read -ra VERSION_PARTS <<< "$LATEST_TAG_CLEAN"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          # For develop branch, use beta versioning
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -n1)
          if [[ -z "$LATEST_TAG" ]]; then
            VERSION="v1.0.0-beta.1"
          else
            LATEST_TAG_CLEAN=${LATEST_TAG#v}
            IFS='.' read -ra VERSION_PARTS <<< "$LATEST_TAG_CLEAN"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=$((${VERSION_PARTS[2]} + 1))
            VERSION="v${MAJOR}.${MINOR}.${PATCH}-beta.1"
          fi
        else
          # For feature branches, use branch name and commit
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          BRANCH_NAME_CLEAN=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
          VERSION="branch-${BRANCH_NAME_CLEAN}-${SHORT_SHA}"
        fi
        
        # Set outputs
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "build-date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        
        # Generate Docker tags
        DOCKER_TAGS=""
        if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          DOCKER_TAGS="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${VERSION}"
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DOCKER_TAGS="${DOCKER_TAGS},${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            DOCKER_TAGS="${DOCKER_TAGS},${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:develop"
          fi
        else
          DOCKER_TAGS="${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}"
        fi
        
        echo "tags=${DOCKER_TAGS}" >> $GITHUB_OUTPUT
        
        # Output for debugging
        echo "Generated version: $VERSION"
        echo "Generated tags: $DOCKER_TAGS"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=VLAN Segment Manager - Network VLAN allocation and management system
          org.opencontainers.image.version=${{ steps.meta.outputs.version }}
          org.opencontainers.image.created=${{ steps.meta.outputs.build-date }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          BUILD_DATE=${{ steps.meta.outputs.build-date }}
          COMMIT_SHA=${{ steps.meta.outputs.short-sha }}

    - name: Create Git tag
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ steps.meta.outputs.version }}
        git push origin ${{ steps.meta.outputs.version }}

    - name: Generate build summary
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Version** | \`${{ steps.meta.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Tags** | \`${{ steps.meta.outputs.tags }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Build Date** | ${{ steps.meta.outputs.build-date }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit** | \`${{ steps.meta.outputs.short-sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Event** | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Usage" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Pull and run the latest image" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "docker run -d -p 8000:8000 --name vlan-manager ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'